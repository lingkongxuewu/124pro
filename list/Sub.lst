C51 COMPILER V9.01   SUB                                                                   06/22/2018 17:24:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SUB
OBJECT MODULE PLACED IN .\obj\Sub.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\Sub.c OPTIMIZE(SIZE) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRINT(.\li
                    -st\Sub.lst) OBJECT(.\obj\Sub.obj)

line level    source

   1          /*--------------------------------文*件*信*息-----------------------------
   2          * 文件名：  Sub.c
   3          * 版　本：  v1.0
   4          * 描  述：  100T双轴 整合后的版本
   5          * 创建人：  
   6          * 日  期：  
   7          --------------------------------------------------------------------------
   8          *当前版本:      v1.0
   9          *修 改 人:
  10          *日　  期:
  11          ----------------------------------修改履历--------------------------------
  12          1、
  13          2、
  14          3、
  15          4、
  16          ------------------------------------------------------------------------*/
  17          #define   __SUB_C__
  18          #include  "_Include.h"
  19          //***********************************************************************/
  20          void Sub_16SBufSwitch (int16s* buf,int8u i,int8u j);
  21          
  22          #if 0
              //***********************************************************************/
              // *功    能：
              // *入    口：
              // *出    口：
              // *备    注：
              // *函数性质：16有符号位转BCD 值存DisBuf数组，后将BCD存于发送缓冲区
              //***********************************************************************/
              void Comm_PutInt16s (int16s val)
              {
                      Sub_Int16s2Str(DispBuf,val);
                      Comm_PutStr((int8u*)DispBuf,6);
              }
              //***********************************************************************/
              // *功    能：
              // *入    口：
              // *出    口：
              // *备    注：
              // *函数性质：16无符号位转BCD 值存DisBuf数组，后将BCD存于发送缓冲区
              //***********************************************************************/
              void Comm_PutInt16u (int16u val)
              {
                      Sub_Int16u2Str(DispBuf,val);
                      Comm_PutStr((int8u*)DispBuf,5);
              }
              //***********************************************************************/
              // *功    能：
              // *入    口：
              // *出    口：
              // *备    注：
              // *函数性质：8位无符号位转BCD 值存DisBuf数组，后将BCD存于发送缓冲区
              //***********************************************************************/
              void Comm_PutInt8u (int8u val)
C51 COMPILER V9.01   SUB                                                                   06/22/2018 17:24:16 PAGE 2   

              {
                      Sub_Int8u2Str(DispBuf,val);
                      Comm_PutStr((int8u*)DispBuf,3);
              }
              #endif
  60          //***********************************************************************/
  61          //***********************************************************************/
  62          // *功    能：
  63          // *入    口：
  64          // *出    口：
  65          // *备    注：
  66          // *函数性质：将回车换行的ASCII值存TX缓冲区
  67          //***********************************************************************/
  68          void Comm_PutNewLine (void)
  69          {
  70   1              Comm_PutChar(0x0D);
  71   1              Comm_PutChar(0x0A);
  72   1      }
  73          //***********************************************************************/
  74          // *功    能：
  75          // *入    口：
  76          // *出    口：
  77          // *备    注：
  78          // *函数性质：Send "ok"
  79          //***********************************************************************/
  80          void Sub_SendOk (void)
  81          {       
  82   1              char* str={",OK"};
  83   1              Comm_PutStr((int8u*)str,3);
  84   1              Comm_PutNewLine();
  85   1              Comm_SendSta();
  86   1      }
  87          //***********************************************************************/
  88          void Sub_SendErr (void)
  89          {       char* str={"ERR"};
  90   1              
  91   1              
  92   1              Comm_PutStr((int8u*)str,3);
  93   1              Comm_PutNewLine();
  94   1              Comm_SendSta();
  95   1      }
  96          
  97          //***********************************************************************/
  98          //int8u Sub_Str2Int16s (int16s *val,int8u* str)
  99          //{     int16u temp;
 100          //      if(FALSE==Sub_Str2Int16u(&temp,&str[1]))return (FALSE);
 101          //      
 102          //      if(str[0]=='+')
 103          //      {       *val = temp;
 104          //              return TRUE;
 105          //      }
 106          //      else if(str[0]=='-')
 107          //      {       *val = -temp;
 108          //              return TRUE;
 109          //      }
 110          //      return FALSE;
 111          //}
 112          //***********************************************************************/
 113          //***********************************************************************/
 114          int8u Sub_Str2Int8u (int8u* str)
 115          {       int8u xdata val;        
 116   1              
C51 COMPILER V9.01   SUB                                                                   06/22/2018 17:24:16 PAGE 3   

 117   1              if((str[0]<'0')||(str[0]>'9'))return(100);
 118   1              if((str[1]<'0')||(str[1]>'9'))return(100);
 119   1              if((str[2]<'0')||(str[1]>'9'))return(100);
 120   1              val=(str[0]-'0')*100+(str[1]-'0')*10+(str[2]-'0');
 121   1              return  val;
 122   1      }
 123          //***********************************************************************/
 124          
 125          
 126          //***********************************************************************/
 127          void Sub_Int8u2Str (char* s,int8u val)
 128          {
 129   1              s[0] = val/100+'0';
 130   1              val  = val%100;
 131   1              s[1] = val/10+'0';
 132   1              s[2] = val%10+'0';
 133   1      }
 134          
 135           //HXL 12/8/28 
 136          //***********************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    184    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
